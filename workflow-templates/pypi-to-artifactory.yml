#
# What to change?
#   - RELEASE_NOTES
#   - Add DEVOPS_TF_AWS_ACCESS_KEY_ID and DEVOPS_TF_AWS_SECRET_ACCESS_KEY GitHub organization secrets to repo.
#   - Add ARTIFACTORY_ACCESS_TOKEN GitHub organization secret to repo.
#
# How to trigger this workflow from git:
#   git tag -a v1.0.0 -m "A short comment about this tag."
#   git push origin --tags
#
name: PyPi to Artifactory

on:
  push:
    tags:
      - 'v*'

env:
  RELEASE_NOTES: |
    Multi-line release notes can be added here:
    - Note 1
    - Note 2
    - Note 3
  AWS_REGION: us-east-2
  AWS_ACCESS_KEY_ID: ${{ secrets.DEVOPS_TF_AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.DEVOPS_TF_AWS_SECRET_ACCESS_KEY }}
  SECURITY_GROUP_ID: sg-0ba9031509218ed2b
  JF_ARTIFACTORY_1: ${{ secrets.ARTIFACTORY_ACCESS_TOKEN }}
  
jobs:
  pyPiToArtifactory:
    name: PyPi to Artifactory
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get Module Name
        id: module
        run: echo "MODULE_NAME=$(cat setup.py | egrep -o "name='(.*)'" | awk -F "=" '{print $2}' | sed "s/'//g")" >> $GITHUB_ENV
      
      - name: Show Module Name
        run: echo "${{ env.MODULE_NAME }}" 
      
      - name: Get Package Version
        id: package
        run: echo "PACKAGE_VERSION=$(cat setup.py | egrep -o "version='(.*)'" | awk -F "=" '{print $2}' | sed "s/'//g")" >> $GITHUB_ENV

      - name: Show Package Version
        run: echo ${{ env.PACKAGE_VERSION }}

      - name: Get Tag Version
        id: tag
        run: echo "TAG_VERSION=${GITHUB_REF/refs\/tags\/v/}" >> $GITHUB_ENV

      - name: Show Tag Version
        run: echo ${{ env.TAG_VERSION }}

      - name: Version Check
        if: ${{ env.PACKAGE_VERSION != env.TAG_VERSION }}
        run: |
          echo " [ ERROR ] Release tag and version found in setup.py are not the same."
          exit 1

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: ${{ env.RELEASE_NOTES }}
          draft: false
          prerelease: false
  
      - name: Configure AWS Region
        run: echo "AWS_DEFAULT_REGION=${{ env.AWS_REGION }}" >> $GITHUB_ENV

      - name: Set IP
        run: |
          echo 'RUNNER_IP<<EOF' >> $GITHUB_ENV
          curl https://checkip.amazonaws.com >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
          echo ${{ env.RUNNER_IP }}

      - name: Add Ingress Rule
        run: |
          aws ec2 authorize-security-group-ingress \
          --group-id ${{ env.SECURITY_GROUP_ID }} \
          --protocol tcp \
          --port 443 \
          --cidr ${{ env.RUNNER_IP }}/32

      - name: Build Package
        run: |
          python3 -m pip install --upgrade build
          python3 -m build
          python3 setup.py sdist bdist_wheel

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v1
      
      - name: Upload Package to Artifactory
        run: |
          jfrog rt u dist/ pypi/ \
            --build-name='${{ env.JFROG_CLI_BUILD_NAME }}' \
            --build-number=${{ env.JFROG_CLI_BUILD_NUMBER }} \
            --module=${{ steps.module.outputs.name }}

      - name: Revoke Access
        run: |
          aws ec2 revoke-security-group-ingress \
            --group-id ${{ env.SECURITY_GROUP_ID }} \
            --protocol tcp \
            --port 443 \
            --cidr ${{ env.RUNNER_IP }}/32
